@page "/Account/signin"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using BlazorWebApp.Data


@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Log in</PageTitle>


<section id="signin">
    <div class="container">
        <StatusMessage Message="@errorMessage" />
        <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
            <DataAnnotationsValidator />

            <h1>Welcome Back</h1>
            <p>Don't have an account yet? <NavLink href="/Account/signup">Sign up here</NavLink>.</p>

            <div class="content">
                <div id="form-email" class="input-group">
                    <label for="Email">Email</label>
                    <InputText id="Email" @bind-Value="Input.Email" placeholder="Enter your email" />
                    <div class="validation-message">
                        <ValidationMessage For="@(() => Input.Email)" />
                    </div>
                </div>
                <div id="form-password" class="input-group">
                    <label for="Password">Password</label>
                    <InputText id="Password" @bind-Value="Input.Password" placeholder="Enter your password" type="password" />
                    <div class="validation-message">
                        <ValidationMessage For="@(() => Input.Password)" />
                    </div>
                </div>
                <div id="form-remember" class="checkbox">
                    <div class="checkbox-group">
                        <InputCheckbox id="RememberMe" @bind-Value="Input.RememberMe" />
                        <label for="RememberMe">Remember me</label>
                        <div class="validation-message">
                            <ValidationMessage For="@(() => Input.RememberMe)" />
                        </div>
                    </div>
                </div>

                <button id="form-button" class="btn-theme-s" type="submit">Sign In</button>

                <a id="form-forgot-password" disabled>Forgot your password?</a>

                <div class="external-providers">
                    <h6>Or sign in with your social account</h6>
                    <div class="providers">
                        <a class="btn-external-signin" disabled><img src="/images/icons/bxl-google.svg" alt="facebook login">Google</a>
                        <a class="btn-external-signin" disabled><img src="/images/icons/bxl-facebook.svg" alt="google login">Facebook</a>
                    </div>
                </div>
            </div>
        </EditForm>
    </div>
</section>


@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}
