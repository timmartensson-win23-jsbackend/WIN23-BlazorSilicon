@page "/Account/signup"
@rendermode InteractiveServer


@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using BlazorWebApp.Data

@inject UserManager<ApplicationUser> UserManager
@inject IUserStore<ApplicationUser> UserStore
@inject SignInManager<ApplicationUser> SignInManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject ILogger<Register> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Sign up</PageTitle>

<section id="signup">
    <div class="container">
        <EditForm Model="SignUpForm" FormName="signupform" OnValidSubmit="HandleSubmit" asp-route-returnUrl="@ReturnUrl" novalidate>
            <DataAnnotationsValidator />

            <div>
                @StatusMessage"
            </div>

            <h1>Create Account</h1>
            <p>Already have an account? <a href="/account/signin">Sign in here</a>.</p>

            <div class="content">
                <div id="form-firstname" class="input-group">
                    <label for="FirstName">First Name</label>
                    <InputText id="FirstName" @bind-Value="SignUpForm.FirstName" placeholder="Enter your first name" />
                    <div class="validation-message">
                        <ValidationMessage For="@(() => SignUpForm.FirstName)" />
                    </div>
                </div>
                <div id="form-lastname" class="input-group">
                    <label for="Lastname">Last Name</label>
                    <InputText id="Lastname" @bind-Value="SignUpForm.LastName" placeholder="Enter your last name" />
                    <div class="validation-message">
                        <ValidationMessage For="@(() => SignUpForm.LastName)" />
                    </div>
                </div>
                <div id="form-email" class="input-group">
                    <label for="Email">Email</label>
                    <InputText id="Email" @bind-Value="SignUpForm.Email" placeholder="Enter your email" type="email" />
                    <div class="validation-message">
                        <ValidationMessage For="@(() => SignUpForm.Email)" />
                    </div>
                </div>
                <div id="form-password" class="input-group">
                    <label for="Password">Password</label>
                    <InputText id="Password" @bind-Value="SignUpForm.Password" placeholder="Enter your password" type="password" />
                    <div class="validation-message">
                        <ValidationMessage For="@(() => SignUpForm.Password)" />
                    </div>
                </div>
                <div id="form-confirm" class="input-group">
                    <label for="ConfirmPassword">Confirm Password</label>
                    <InputText id="ConfirmPassword" @bind-Value="SignUpForm.ConfirmPassword" placeholder="Confirm your password" type="password" />
                    <div class="validation-message">
                        <ValidationMessage For="@(() => SignUpForm.ConfirmPassword)" />
                    </div>
                </div>
                <div id="form-terms" class="checkbox">
                    <div class="checkbox-group">
                        <div class="input-group">
                            <InputCheckbox id="TermsAndConditions" @bind-Value="SignUpForm.TermsAndConditions" />
                            <label for="TermsAndConditions">I agree to the <NavLink href="/terms">Terms</NavLink> & <NavLink href="/conditions">Conditions</NavLink>.</label>
                        </div>
                        <div class="validation-message">
                            <ValidationMessage For="@(() => SignUpForm.TermsAndConditions)" />
                        </div>
                    </div>
                </div>
            </div>

            <button id="form-button" class="btn-theme-s" type="submit">Sign Up</button>
        </EditForm>
    </div>
</section>



@code {
    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    [SupplyParameterFromQuery]
    private string? StatusMessage { get; set; }

    [SupplyParameterFromForm]
    private SignUpFormModel SignUpForm { get; set; } = new();


    public async Task HandleSubmit(EditContext editContext)
    {
        var user = new ApplicationUser
        {
            UserProfile = new UserProfile
            {
                FirstName = SignUpForm.FirstName,
                LastName = SignUpForm.LastName
            },
            UserName = SignUpForm.Email,
            Email = SignUpForm.Email
        };
        var result = await UserManager.CreateAsync(user, SignUpForm.Password);
        if (!result.Succeeded)
        {
            StatusMessage = "Unable to create account. Please try again";
            return;
        }

        await ServiceBusManager.SendMessageAsync(SignUpForm.Email);
        if (UserManager.Options.SignIn.RequireConfirmedAccount)
        {
            RedirectManager.RedirectTo("Account/RegisterConfirmation", new() { ["email"] = SignUpForm.Email, ["returnUrl"] = ReturnUrl });
        }

        await SignInManager.SignInAsync(user, isPersistent: false);
        RedirectManager.RedirectTo(ReturnUrl);

    }



    public class SignUpFormModel
    {
        [Display(Name = "First Name", Prompt = "Enter your first name", Order = 0)]
        [Required(ErrorMessage = "Enter first name")]
        [MinLength(2, ErrorMessage = "First name is too short")]
        public string FirstName { get; set; } = null!;


        [Display(Name = "Last Name", Prompt = "Enter your last name", Order = 1)]
        [Required(ErrorMessage = "Enter last name")]
        [MinLength(2, ErrorMessage = "Last name is too short")]
        public string LastName { get; set; } = null!;


        [DataType(DataType.EmailAddress)]
        [Display(Name = "Email", Prompt = "Enter your email", Order = 2)]
        [RegularExpression(@"^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$", ErrorMessage = "Invalid email")]
        [Required(ErrorMessage = "Invalid email")]
        public string Email { get; set; } = null!;


        [Display(Name = "Password", Prompt = "Enter your password", Order = 3)]
        [Required(ErrorMessage = "Invalid password")]
        [StringLength(50, ErrorMessage = "The password must be at least 8 characters", MinimumLength = 8)]
        [DataType(DataType.Password)]
        [RegularExpression(@"^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[^\da-zA-Z]).{8,50}$", ErrorMessage = "Password needs one uppercase letter, one number and one special character")]
        public string Password { get; set; } = null!;


        [Display(Name = "Confirm Password", Prompt = "Confirm your password", Order = 4)]
        [Required(ErrorMessage = "Password does not match")]
        [DataType(DataType.Password)]
        [Compare(nameof(Password), ErrorMessage = "Passwords do not match")]
        public string ConfirmPassword { get; set; } = null!;


        [Display(Name = "I agree to the terms and conditions", Order = 5)]
        [Range(typeof(bool), "true", "true", ErrorMessage = "You must agree to the terms & conditions to sell your soul to our dark lord")]
        public bool TermsAndConditions { get; set; } = false;
    }




}
