@page "/Account/RegisterConfirmation"
@rendermode InteractiveServer

@using System.Text
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using BlazorWebApp.Data
@using System.ComponentModel.DataAnnotations

@inject UserManager<ApplicationUser> UserManager
@inject NavigationManager NavigationManager


<PageTitle>Register confirmation</PageTitle>

<section id="signup">
    <div class="container">
        <EditForm FormName="verifycode" Model="VerifyCodeForm" OnValidSubmit="HandleSubmit" asp-route-returnUrl="@ReturnUrl" novalidate>
            <DataAnnotationsValidator />

            <h1>Verify Your Account</h1>


            <div class="content">
                <div id="form-firstname" class="input-group">
                    <label for="FirstName">Verification code</label>
                    <InputText id="FirstName" @bind-Value="VerifyCodeForm.Code" placeholder="Enter your verification code" />
                    <div class="validation-message">
                        <ValidationMessage For="@(() => VerifyCodeForm.Code)" />
                    </div>
                    <p>@statusMessage</p>
                </div>
            </div>

            <button id="form-button" class="btn-theme-s" type="submit">Verify Code</button>
        </EditForm>
        <p>Didn't recieve an email? <button @onclick="ResendCode">resend email</button>.</p>
    </div>
</section>

@code {
    private string? statusMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromQuery]
    private string? Email { get; set; }

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    [SupplyParameterFromForm]
    private VerifyCodeModel VerifyCodeForm { get; set; } = new VerifyCodeModel();

    private async Task HandleSubmit()
    {
        var result = await Http.PostAsJsonAsync("https://verificationprovider-win23.azurewebsites.net/api/validate?code=p1RQzPBWVl0Eh9TZCt5DBMtrSVh9GQC-xymNn1Zu83KrAzFu4ZyALw==", new { Email = Email, Code = VerifyCodeForm.Code });
        if (result.IsSuccessStatusCode)
        {
            var user = await UserManager.FindByEmailAsync(Email!);
            user!.EmailConfirmed = true;
            await UserManager.UpdateAsync(user);
            
            NavigationManager.NavigateTo("/signin");
        }
        else
        {
            statusMessage = "Invalid verification code";
        }
    }

    private async Task ResendCode()
    {
        await ServiceBusManager.SendMessageAsync(Email!);
        statusMessage = "Verification code resent";
    }


    protected override async Task OnInitializedAsync()
    {
        if (Email is null)
        {
            NavigationManager.NavigateTo("");
        }

        var user = await UserManager.FindByEmailAsync(Email!);
        if (user is null)
        {
            HttpContext.Response.StatusCode = StatusCodes.Status404NotFound;
            statusMessage = "Error finding user for unspecified email";
        }
        else
        {

        }
    }



    public class VerifyCodeModel
    {
        [Required]
        public string Code { get; set; } = null!;
    }
}
