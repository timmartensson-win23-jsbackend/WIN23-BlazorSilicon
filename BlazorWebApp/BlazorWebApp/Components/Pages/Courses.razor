@page "/courses"
@using BlazorWebApp.Data
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@attribute [StreamRendering]
@rendermode InteractiveServer
@* @attribute [Authorize] *@                @* <------   öppna upp kommentar sen!   *@
@inject HttpClient http
@inject NavigationManager Navigation

@inject UserManager<ApplicationUser> UserManager
@inject ApplicationDbContext DbContext
@inject SignInManager<ApplicationUser> SignInManager

<PageTitle>Courses</PageTitle>

<section id="courses-overview">
    <div class="courses container">       
        <div class="section-title">
            <h1 class="h1">Courses</h1>
            <div class="search-div">
                <div class="dropdown select">
                    <select class="selected" @onchange="OnCategoryChange"><i class="fa-sharp fa-light fa-circle-caret-down"></i>
                        <option value="all" class="select-options">All categories</option>
                        <div class="option" data-value="all">All Categories</div>
                        @if (categories != null)
                        {
                            foreach (var category in categories)
                            {
                                <option class="option" value="@category.CategoryName">@category.CategoryName</option>
                            }
                        }
                    </select>
                </div>
                <div class="search">
                    <input id="searchQuery" type="search" name="searchQuery" placeholder="Search courses" />
                    <i class="fa-sharp fa-solid fa-magnifying-glass"></i>
                </div>
            </div>
        </div>

        @if(courses == null)
        {
            <p>Loading...</p>
        }

        else
        {
            <div class="items">

                @foreach (var course in courses)
                {
                    <div class="course-card">
                        <div class="content" @onclick="() => NavToCourseDetails(course.Id!)">
                            <div class="image">
                                <img src="/images/@course.CourseImage" alt="" />

                                @if (course.IsBestSeller)
                                {
                                    <span class="best-seller">Best Seller</span>
                                }
                                <button class="bookmark" @onclick="() => ToggleCourse(course)" @onclick:stopPropagation="true">
                                    @if (courseSavedStates[course.Id!])
                                    {
                                        <i class="fa-solid fa-bookmark"></i>
                                    }
                                    else
                                    {
                                        <i class="fa-regular fa-bookmark"></i>
                                    }
                                </button>

                               @*  <a href="#" data-course-id="@course.Id" class="bookmark" onclick="saveCourse(event, @course.Id)"> <i class="fa-sharp fa-regular fa-bookmark" title="Join Course"></i></a> *@
                            </div>
                            <div class="course-info">
                                <h5 class="title">@course.Title</h5>
                                <p class="author">By @course.AuthorName</p>

                                @if (course.DiscountPrice != null)
                                {
                                    <div class="discount-div">
                                        <p class="discount-price">$ @course.DiscountPrice</p>
                                        <p class="original-price">$ @course.Price</p>
                                    </div>
                                }
                                else
                                {
                                    <p class="price">$ @course.Price</p>
                                }

                            </div>
                            <div class="divider"></div>
                            <footer>
                                <div>
                                    <i class="fa-sharp fa-solid fa-clock"></i>
                                    <p>@course.ViewHours hours</p>
                                </div>
                                <div>
                                    <i class="fa-sharp fa-light fa-thumbs-up"></i>
                                    <p>@course.LikesInPercent % (@course.LikesInNumbers K)</p>
                                </div>
                            </footer>
                        </div>
                    </div>
                }
            </div>
        }        
    </div>
    <BlazorWebApp.Components.Partials.Courses.SkillsPartial />
</section>




@code {
    private List<CoursesModel>? courses;
    private List<CategoryModel>? categories;

    private Dictionary<string, bool> courseSavedStates = new Dictionary<string, bool>();

    private ApplicationUser? user;


    protected override async Task OnInitializedAsync()
    {
        user = await UserManager.GetUserAsync(SignInManager.Context.User);

        var query = new GraphQLQuery { Query = "{getAllCourses {id title isBestSeller category {categoryName} courseImage authorName discountPrice price viewHours likesInPercent likesInNumbers}}" };
        var respons = await Http.PostAsJsonAsync("https://coursesprovider.azurewebsites.net/api/graphql?code=Ms8IxsC9w8G_dT8KJZbuf11TR3o7reeP9ld8DSPtnesZAzFuaTdsNw%3D%3D", query);

        if (respons.IsSuccessStatusCode)
        {
            var result = await respons.Content.ReadFromJsonAsync<DynamicGraphQLResponse>();
            courses = result?.Data.GetProperty("getAllCourses").EnumerateArray().Select(course => new CoursesModel
            {
                Id = course.GetProperty("id").GetString(),
                Title = course.GetProperty("title").GetString()!,
                IsBestSeller = course.GetProperty("isBestSeller").GetBoolean(),
                Category = $"{course.GetProperty("category").GetProperty("categoryName").GetString()}",
                CourseImage = course.GetProperty("courseImage").GetString(),
                AuthorName = course.GetProperty("authorName").GetString(),
                DiscountPrice = course.GetProperty("discountPrice").GetString(),
                Price = course.GetProperty("price").GetString(),
                ViewHours = course.GetProperty("viewHours").GetString(),
                LikesInPercent = course.GetProperty("likesInPercent").GetString(),
                LikesInNumbers = course.GetProperty("likesInNumbers").GetString()

            })
            .ToList();
        }

        foreach (var course in courses!)
        {
            var isSaved = await DbContext.SavedCourses.AnyAsync(x => x.CourseId == course.Id && x.UserId == user!.Id);
            courseSavedStates.Add(course.Id!, isSaved);
        }
    }

    private void NavToCourseDetails(string courseId)
    {
        Navigation.NavigateTo($"/coursedetails/{courseId}");
    }

    private void OnCategoryChange(ChangeEventArgs e)
    {
        var selectedCategory = e.Value?.ToString();
                                                            // Hantera valet av kategori här, ladda data baserat på den valda kategorin. Hur?
        Console.WriteLine($"Selected category: {selectedCategory}");
    }

    private void NavToPage(int pageNumber)
    {
        // Navigation.NavigateTo($"/courses?pageNumber={pageNumber}&pageSize={Pagination.PageSize}");
    }

    private async Task ToggleCourse(CoursesModel course)
    {
        if (course != null && user != null)
        {
            if (courseSavedStates[course.Id!])
            {
                var savedCourse = await DbContext.SavedCourses.FirstOrDefaultAsync(sc => sc.UserId == user.Id && sc.CourseId == course.Id);
                if (savedCourse != null)
                {
                    DbContext.SavedCourses.Remove(savedCourse);
                    await DbContext.SaveChangesAsync();
                    courseSavedStates[course.Id!] = false;
                }
            }
            else
            {
                var savedCourse = new SavedCourses
                    {
                        UserId = user.Id,
                        CourseId = course.Id!
                    };
                DbContext.SavedCourses.Add(savedCourse);
                await DbContext.SaveChangesAsync();
                courseSavedStates[course.Id!] = true;
            }
            StateHasChanged();
        }
    }
}
