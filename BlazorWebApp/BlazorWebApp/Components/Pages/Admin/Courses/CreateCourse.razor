@page "/admin/createcourse"
@using BlazorWebApp.Models.AdminPortal.Courses
@rendermode InteractiveServer
@attribute [StreamRendering]
@inject GraphQLService graphQLService


<PageTitle>AdminPortal - Create Course</PageTitle>

<section id="createcourse">

    <h2>Create A New Course</h2>
    <EditForm Model="Model" method="post" OnValidSubmit="HandleSubmit" FormName="createcourse" novalidate>
        <DataAnnotationsValidator/>

        <div class="course-info">
            <h3>General Information about the course</h3>
            <div>
                <label for="Title">Course Title</label>
                <InputText @bind-Value="Model.Title" />
            </div>
            <div>
                <label for="Price">Price</label>
                <InputText @bind-Value="Model.Price" />
            </div>
            <div>
                <label for="DiscountPrice">Discount Price</label>
                <InputText @bind-Value="Model.DiscountPrice" />
            </div>
            <div>
                <label for="CourseImage">Image url</label>
                <InputText @bind-Value="Model.CourseImage" />
            </div>
            <div>
                <label for="CourseImageAltText">Alt text for course image</label>
                <InputText @bind-Value="Model.CourseImageAltText" />
            </div>
            <div>
                <label for="Rating">Rating</label>
                <InputText @bind-Value="Model.Rating" />
            </div>
            <div>
                <label for="Reviews">Reviews</label>
                <InputText @bind-Value="Model.Reviews" />
            </div>
            <div>
                <label for="Views">Views</label>
                <InputText @bind-Value="Model.Views" />
            </div>
            <div>
                <label for="LikesInPercent">Likes in percent</label>
                <InputText @bind-Value="Model.LikesInPercent" />
            </div>
            <div>
                <label for="LikesInNumbers">Likes in numbers</label>
                <InputText @bind-Value="Model.LikesInNumbers" />
            </div>
        </div>

        <div class="author-info">
            <h3>Author Information</h3>
            <div>
                <label for="AuthorName">Author name</label>
                <InputText @bind-Value="Model.AuthorName" />
            </div>
            <div>
                <label for="AutherBio">Author biography</label>
                <InputText @bind-Value="Model.AutherBio" />
            </div>
            <div>
                <label for="AuthorImage">Image of author</label>
                <InputText @bind-Value="Model.AuthorImage" />
            </div>
            <div>
                <label for="AuthorImageAltText">Alt text for author image</label>
                <InputText @bind-Value="Model.AutherImageAltText" />
            </div>
            <div>
                <label for="YouTubeSubscribers">YouTube Subscribers</label>
                <InputText @bind-Value="Model.YouTubeSubscribers" />
            </div>
            <div>
                <label for="FaceBookFollowers">FaceBook Followers</label>
                <InputText @bind-Value="Model.FaceBookFollowers" />
            </div>
        </div>

        <div class="course-details">
            <h3>Details about the Course</h3>
            <div>
                <label for="ShowcaseImage">Image url for showcase</label>
                <InputText @bind-Value="Model.ShowcaseImage" />
            </div>
            <div>
                <label for="CourseDescription">Description</label>
                <InputText @bind-Value="Model.CourseDescription" />
            </div>
            <div>
                <label for="ViewHours">View Hours</label>
                <InputText @bind-Value="Model.ViewHours" />
            </div>
            <div>
                <label for="Articles">Articles</label>
                <InputText @bind-Value="Model.Articles" />
            </div>
            <div>
                <label for="Resources">Resourses</label>
                <InputText @bind-Value="Model.Resources" />
            </div>
            <div>
                <label for="AccessTime">Access Time</label>
                <InputText @bind-Value="Model.AccessTime" />
            </div>
            <div>
                <label for="ProgramDetailsTitle">Program Details Title</label>
                <InputText id="ProgramDetailsTitle" @bind-Value="newProgramDetailsTitle" />
                <button type="button" @onclick="AddProgramDetailsTitle">Add</button>
                <ul>
                    @if(Model.ProgramDetailsTitle != null)
                    {
                        @foreach (var title in Model.ProgramDetailsTitle)
                        {
                            <li>@title</li>
                        }
                    }
                   
                </ul>
            </div>
            <div>
                <label for="ProgramDetailsText">Program Details Text</label>
                <InputText id="ProgramDetailsText" @bind-Value="newProgramDetailsText" />
                <button type="button" @onclick="AddProgramDetailsText">Add</button>
                <ul>
                    @if (Model.ProgramDetailsText != null)
                    {
                        @foreach (var text in Model.ProgramDetailsText)
                        {
                            <li>@text</li>
                        }
                    }
                </ul>
            </div>
            <div>
                <label for="LearnPoints">Learn Points</label>
                <InputText id="LearnPoints" @bind-Value="newLearnPoint" />
                <button type="button" @onclick="AddLearnPoint">Add</button>
                <ul>
                    @if (Model.LearnPoints != null)
                    {
                        @foreach (var point in Model.LearnPoints)
                        {
                            <li>@point</li>
                        }
                    }
                </ul>
            </div>
            <div>
                <label for="Category">Category</label>
                <InputText @bind-Value="Model.Category" />
            </div>
        </div>

        <button class="btn-theme" type="submit">Create A New Course</button>
        @if (!string.IsNullOrEmpty(StatusMessage))
        {
            <span id="success" class="alert alert-dark">@StatusMessage</span>
        }
        

    </EditForm>

</section>

@code {
    [SupplyParameterFromForm]
    public CreateCourseModel Model { get; set; } = new CreateCourseModel();
    private string? newProgramDetailsTitle;
    private string? newProgramDetailsText;
    private string? newLearnPoint;
    private string? StatusMessage { get; set; }

    private void AddProgramDetailsTitle()
    {
        if (!string.IsNullOrWhiteSpace(newProgramDetailsTitle))
        {
            if(Model.ProgramDetailsTitle == null)
            {
                Model.ProgramDetailsTitle = new List<string>();
            }
            Model.ProgramDetailsTitle.Add(newProgramDetailsTitle);
            newProgramDetailsTitle = string.Empty;
        }
    }

    private void AddProgramDetailsText()
    {
        if (!string.IsNullOrWhiteSpace(newProgramDetailsText))
        {
            if (Model.ProgramDetailsText == null)
            {
                Model.ProgramDetailsText = new List<string>();
            }
            Model.ProgramDetailsText.Add(newProgramDetailsText);
            newProgramDetailsText = string.Empty;
        }
    }

    private void AddLearnPoint()
    {
        if (!string.IsNullOrWhiteSpace(newLearnPoint))
        {
            if (Model.LearnPoints == null)
            {
                Model.LearnPoints = new List<string>();
            }
            Model.LearnPoints.Add(newLearnPoint);
            newLearnPoint = string.Empty;
        }
    }

    private async Task HandleSubmit()
    {
        try
        {
            var result = await graphQLService.AddCourseAsync(Model);

            if (result != null)
            {
                StatusMessage = "course created";
            }
            else
            {
                StatusMessage = "Something went wrong: ";
            }
        }
        catch(Exception ex)
        {
            StatusMessage = $"Bad request: {ex.Message}";
        }
    }  

}
