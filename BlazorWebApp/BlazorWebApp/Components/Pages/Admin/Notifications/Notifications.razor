@page "/admin/newsletter"
@using BlazorWebApp.Data
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using System.ComponentModel.DataAnnotations
@rendermode InteractiveServer
@attribute [Authorize(Roles = "Admin, SuperDuperMegaAdmin")]

@inject ApplicationDbContext DbContext
@inject UserManager<ApplicationUser> UserManager
@inject NavigationManager NavigationManager

    <PageTitle>Admin - Notifications</PageTitle>

@if (usersWithSubscribe is null)
{
    <p>Loading ...</p>
}
else
{
    @if (isConfirmationVisible || userToUpdate != null)
    {
        <div class="page-overlay" @onclick="HideForms"></div>
    }
    <section id="admin-notify" @onclick="HideForms">
        <div class="user-list-group">
            <h3>Users with Subscription</h3>
            <div class="user-header"></div>

            @foreach (var userWithNotify in usersWithSubscribe)
            {
                var user = userWithNotify.User;
                var notifyEmail = userWithNotify.NotifyEmail;

                <div class="user-list-item">
                    <div class="credentials">                        
                        <div class="full-name">@user.UserProfile!.FirstName @user.UserProfile!.LastName</div>
                        <div class="email">User name: @user.Email</div>
                        <div class="notify-email">Email for subscription: @notifyEmail</div>
                    </div>                 
                    <div class="links">
                        <button class="btn-theme" @onclick="(() => ShowUpdateForm(userWithNotify))" @onclick:stopPropagation="true">Read/Update</button>
                        <button class="btn-youtube" @onclick="(() => ShowConfirmation(userWithNotify))" @onclick:stopPropagation="true">Delete</button>
                    </div>
                </div>
            }
        </div>
        @if (isConfirmationVisible)
        {
            <div class="confirm-delete" @onclick:stopPropagation="true">
                <div class="content">
                    <h2>Confirm Delete</h2>
                    <p>Are you sure you want to delete this subscription?</p>
                    <div class="buttons">
                        <button class="btn-youtube" @onclick="DeleteConfirmed">Yes</button>
                        <button class="btn-gray" @onclick="(() => isConfirmationVisible = false)">No</button>
                    </div>
                </div>
            </div>
        }
        @if (userToUpdate != null)
        {
            var user = userToUpdate.Value.User;
            var notifyEmail = userToUpdate.Value.NotifyEmail;

            <div class="update-form" @onclick:stopPropagation="true">
                <div class="content">
                    <h3>Update subscription</h3>
                    <EditForm Model="userToUpdateModel" OnValidSubmit="UpdateUser">
                        <div id="form-firstname" class="input-group">
                            <label for="FirstName">First name</label>
                            <InputText id="FirstName" @bind-Value="user.UserProfile!.FirstName" disabled />
                        </div>
                        <div id="form-lastname" class="input-group">
                            <label for="LastName">Last name</label>
                            <InputText id="LastName" @bind-Value="user.UserProfile!.LastName" disabled />
                        </div>
                        <div id="form-email" class="input-group">
                            <label for="Email">User name</label>
                            <InputText id="Email" @bind-Value="user.Email" disabled />
                        </div>
                        <div id="form-email" class="input-group">
                            <label for="Email">Subscribed Email</label>
                            <InputText id="Email" @bind-Value="userToUpdateModel.Email" />
                        </div>

                        <hr />
                        
                        <button class="btn-theme" type="submit">Update</button>
                    </EditForm>
                    <button class="btn-gray" @onclick="(() => userToUpdate = null)">Close</button>
                </div>
            </div>
        }
        
        </section>
}

@code {
    private List<(ApplicationUser User, string NotifyEmail)> usersWithSubscribe = new();
    private bool isConfirmationVisible = false;
    private (ApplicationUser User, string NotifyEmail)?userToDelete;
    private (ApplicationUser User, string NotifyEmail)? userToUpdate;
    private SubscribeModel userToUpdateModel { get; set; } = new();
    private string StatusMessage = "";


    protected override async Task OnInitializedAsync()
    {
        var allUsers = await DbContext.Users
             .Include(user => user.UserProfile)
             .Where(user => DbContext.UserNotifyEmails.Any(une => une.UserId == user.Id))
             .ToListAsync();

        var notifyEmails = await DbContext.UserNotifyEmails
        .Where(une => allUsers.Select(user => user.Id).Contains(une.UserId))
        .ToListAsync();

        usersWithSubscribe = allUsers.Select(user =>
            (
                User: user,
                NotifyEmail: notifyEmails.First(une => une.UserId == user.Id).NotifyEmail
            )
        ).ToList();

    }

    private async Task UpdateUser()
    {
        if (userToUpdate != null)
        {
            var existing = await DbContext.UserNotifyEmails.FirstOrDefaultAsync(x => x.UserId == userToUpdate.Value.User.Id);
            if (existing != null)
            {
                userToUpdateModel.OldEmail = existing.NotifyEmail;
                existing.NotifyEmail = userToUpdateModel.Email!;
                DbContext.UserNotifyEmails.Update(existing);
                await DbContext.SaveChangesAsync();

                var result = await Http.PostAsJsonAsync("https://siliconnewsletterprovider.azurewebsites.net/api/Subscribe?code=wGaBQjD3VYfaK-AwJLKMG-CFdYJ-5Jbw5OQZs9xEHiiTAzFuV01ovg==", userToUpdateModel);
                if (result.IsSuccessStatusCode)
                {
                    StatusMessage = "Email updated successfully!";
                }
                else
                {
                    StatusMessage = "Failed to update email.";
                }

                var userIndex = usersWithSubscribe.FindIndex(u => u.User.Id == userToUpdate.Value.User.Id);
                if (userIndex >= 0)
                {
                    usersWithSubscribe[userIndex] = (userToUpdate.Value.User, userToUpdateModel.Email!);
                }

                userToUpdate = null;
                StateHasChanged();
            }

        }
    }

    private async Task DeleteConfirmed()
    {

        if (userToDelete != null)
        {
            // DbContext.Users.Remove(userToDelete);
            // await DbContext.SaveChangesAsync();
            // users.Remove(userToDelete);
            // await InvokeAsync(StateHasChanged);
            // isConfirmationVisible = false;
        }
    }

    private void ShowUpdateForm((ApplicationUser User, string NotifyEmail) userWithNotify)    
    {
        userToUpdate = userWithNotify;
        userToUpdateModel.Email = userWithNotify.NotifyEmail;
        userToUpdateModel.OldEmail = userWithNotify.NotifyEmail;
        isConfirmationVisible = false;
        StateHasChanged();
    }

    private void ShowConfirmation((ApplicationUser User, string NotifyEmail) userWithNotify)
    {
        userToDelete = userWithNotify;
        isConfirmationVisible = true;
        StateHasChanged();
    }

    private void HideForms()
    {
        userToUpdate = null;
        isConfirmationVisible = false;
        StateHasChanged();
    }

    private class SubscribeModel
    {
        [Required(ErrorMessage = "Email is required.")]
        [DataType(DataType.EmailAddress)]
        [RegularExpression(@"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$", ErrorMessage = "Invalid email address.")]
        public string? Email { get; set; }
        public string? OldEmail { get; set; }
        public bool DailyNewsLetter { get; set; } = true;
        public bool AdvertisingUpdates { get; set; } = true;
        public bool WeekInReviews { get; set; } = true;
        public bool EventUpdates { get; set; } = true;
        public bool StartupsWeekly { get; set; } = true;
        public bool Podcasts { get; set; } = true;

    }
}
