@page "/Account/SavedCourses"
@using BlazorWebApp.Data
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@attribute [StreamRendering]
@rendermode InteractiveServer
@* @attribute [Authorize] *@                @* <------   öppna upp kommentar sen!   *@
@inject HttpClient http
@inject NavigationManager Navigation

@inject UserManager<ApplicationUser> UserManager
@inject ApplicationDbContext DbContext
@inject SignInManager<ApplicationUser> SignInManager



<section id="account-saved-courses">
    <div class="courses container">
        <div class="section-title">
            <h1 class="h1">Saved Courses</h1>

            <button class="btn-red-transparent" @onclick=DeleteAllCourses>Delete all</button>
        </div>

        @if (courses == null)
        {
            <p>Loading...</p>
        }

        else
        {
            <div class="items">

                @foreach (var course in courses)
                {
                    <div class="course-card">
                        <div class="content" @onclick="() => NavToCourseDetails(course.Id!)">
                            <div class="image">
                                <img src="/images/@course.CourseImage" alt="" />

                                @if (course.IsBestSeller)
                                {
                                    <span class="best-seller">Best Seller</span>
                                }
                                <button class="bookmark" @onclick="() => ToggleCourse(course)" @onclick:stopPropagation="true">
                                    @if (courseSavedStates[course.Id!])
                                    {
                                        <i class="fa-solid fa-bookmark"></i>
                                    }
                                    else
                                    {
                                        <i class="fa-regular fa-bookmark"></i>
                                    }
                                </button>
                            </div>
                            <div class="course-info">
                                <h5 class="title">@course.Title</h5>
                                <p class="author">By @course.AuthorName</p>

                                @if (course.DiscountPrice != null)
                                {
                                    <div class="discount-div">
                                        <p class="discount-price">$ @course.DiscountPrice</p>
                                        <p class="original-price">$ @course.Price</p>
                                    </div>
                                }
                                else
                                {
                                    <p class="price">$ @course.Price</p>
                                }

                            </div>
                            <div class="divider"></div>
                            <footer>
                                <div>
                                    <i class="fa-sharp fa-solid fa-clock"></i>
                                    <p>@course.ViewHours hours</p>
                                </div>
                                <div>
                                    <i class="fa-sharp fa-light fa-thumbs-up"></i>
                                    <p>@course.LikesInPercent % (@course.LikesInNumbers K)</p>
                                </div>
                            </footer>
                        </div>
                    </div>
                }
            </div>
        }
    </div>
</section>

@code {
    private List<CoursesModel>? courses;
    private List<CategoryModel>? categories;

    private Dictionary<string, bool> courseSavedStates = new Dictionary<string, bool>();

    private ApplicationUser? user;


    protected override async Task OnInitializedAsync()
    {
        user = await UserManager.GetUserAsync(SignInManager.Context.User);

        var query = new GraphQLQuery { Query = "{getAllCourses {id title isBestSeller category {categoryName} courseImage authorName discountPrice price viewHours likesInPercent likesInNumbers}}" };
        var respons = await Http.PostAsJsonAsync("https://coursesprovider.azurewebsites.net/api/graphql?code=Ms8IxsC9w8G_dT8KJZbuf11TR3o7reeP9ld8DSPtnesZAzFuaTdsNw%3D%3D", query);

        if (respons.IsSuccessStatusCode)
        {
            var result = await respons.Content.ReadFromJsonAsync<DynamicGraphQLResponse>();
            var allCourses = result?.Data.GetProperty("getAllCourses").EnumerateArray().Select(course => new CoursesModel
                {
                    Id = course.GetProperty("id").GetString(),
                    Title = course.GetProperty("title").GetString()!,
                    IsBestSeller = course.GetProperty("isBestSeller").GetBoolean(),
                    Category = $"{course.GetProperty("category").GetProperty("categoryName").GetString()}",
                    CourseImage = course.GetProperty("courseImage").GetString(),
                    AuthorName = course.GetProperty("authorName").GetString(),
                    DiscountPrice = course.GetProperty("discountPrice").GetString(),
                    Price = course.GetProperty("price").GetString(),
                    ViewHours = course.GetProperty("viewHours").GetString(),
                    LikesInPercent = course.GetProperty("likesInPercent").GetString(),
                    LikesInNumbers = course.GetProperty("likesInNumbers").GetString()

                })
            .ToList();

            courses = new List<CoursesModel>();

            foreach (var course in allCourses!)
            {
                var isSaved = await DbContext.SavedCourses.AnyAsync(x => x.CourseId == course.Id && x.UserId == user!.Id);
                if (isSaved)
                {
                    courses!.Add(course);
                    courseSavedStates.Add(course.Id!, true);
                }
            }
        }




    }

    private void NavToCourseDetails(string courseId)
    {
        Navigation.NavigateTo($"/coursedetails/{courseId}");
    }

    private void OnCategoryChange(ChangeEventArgs e)
    {
        var selectedCategory = e.Value?.ToString();
        // Hantera valet av kategori här, ladda data baserat på den valda kategorin. Hur?
        Console.WriteLine($"Selected category: {selectedCategory}");
    }

    private void NavToPage(int pageNumber)
    {
        // Navigation.NavigateTo($"/courses?pageNumber={pageNumber}&pageSize={Pagination.PageSize}");
    }

    private async Task ToggleCourse(CoursesModel course)
    {
        if (course != null && user != null)
        {
            if (courseSavedStates[course.Id!])
            {
                var savedCourse = await DbContext.SavedCourses.FirstOrDefaultAsync(sc => sc.UserId == user.Id && sc.CourseId == course.Id);
                if (savedCourse != null)
                {
                    DbContext.SavedCourses.Remove(savedCourse);
                    await DbContext.SaveChangesAsync();
                    courseSavedStates[course.Id!] = false;

                    courses = courses!.Where(c => c.Id != course.Id).ToList();
                }
            }
            else
            {
                var savedCourse = new Data.SavedCourses 
                { 
                    UserId = user.Id,
                    CourseId = course.Id! 
                };
                DbContext.SavedCourses.Add(savedCourse);
                await DbContext.SaveChangesAsync();
                courseSavedStates[course.Id!] = true;
            }
            StateHasChanged();
        }
    }

    private async Task DeleteAllCourses()
    {
        var savedCourses = await DbContext.SavedCourses.Where(sc => sc.UserId == user!.Id).ToListAsync();
        DbContext.SavedCourses.RemoveRange(savedCourses);
        await DbContext.SaveChangesAsync();

        courses = new List<CoursesModel>();
        courseSavedStates.Clear();
        StateHasChanged();
    }
}
