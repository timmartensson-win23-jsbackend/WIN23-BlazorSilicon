@rendermode InteractiveServer

@inject ThemeService ThemeService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime


<button type="button" id="darkmode-button" @onmouseover="PlaySound" @onclick="ToggleThemeAsync"><span>Start Coding</span></button>

@code {
    private bool isSoundPlaying = false;
    private bool? IsDarkMode;
    private string? theme;
    private string? cookie;
    private bool isFirstClick = true;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;



    protected override async Task OnInitializedAsync()
    {
        getCookie();
        if(cookie == "dark-mode")
        {
            IsDarkMode = true;
        }
        else
        {
            IsDarkMode = false;
        }

        ThemeService.OnThemeChanged += Refresh;

    }

    private void Refresh()
    {
        StateHasChanged(); // refresh the component
    }

    public void Dispose()
    {
        ThemeService.OnThemeChanged -= Refresh; // unsubscribe when the component is disposed
    }


    private async Task ToggleThemeAsync()
    {
        ThemeService.ToggleTheme();
        if (isFirstClick)
        {
            ThemeService.ToggleTheme();
            isFirstClick = false;
        }

        string theme = ThemeService.GetTheme();

        if (theme == "dark-mode")
        {
            await JSRuntime.InvokeVoidAsync("createCookie", "theme", theme, 365);
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("removeCookie", "theme");
        }

        NavigationManager.Refresh();
    }

    private void getCookie()
    {
        if (HttpContext != null)
        {
            cookie = HttpContext.Request.Cookies["theme"];
        }
        
    }

    private async Task PlaySound()
    {
        if (!isSoundPlaying)
        {
            isSoundPlaying = true;
            Console.WriteLine("PlaySound method called");
            await JSRuntime.InvokeVoidAsync("playSound");
            await Task.Delay(TimeSpan.FromSeconds(8)); // wait for 8 seconds
            isSoundPlaying = false;
        }
    }

}
