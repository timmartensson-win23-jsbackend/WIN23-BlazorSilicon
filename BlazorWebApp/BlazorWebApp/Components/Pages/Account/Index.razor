@page "/account/details"

@using System.ComponentModel.DataAnnotations
@using BlazorWebApp.Models
@using Microsoft.AspNetCore.Identity
@using BlazorWebApp.Data
@using Microsoft.EntityFrameworkCore

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject ApplicationDbContext DbContext
@inject UserService UserService

<PageTitle>Profile</PageTitle>

<h3>Profile</h3>

@if (user == null)
{
    <div>Loading...</div>
}
else
{
    <div class="row">
        <div class="col-md-6">
            <EditForm Model="Input" FormName="profile" OnValidSubmit="OnValidSubmitAsync" method="post">
                <DataAnnotationsValidator />
                <ValidationSummary class="text-danger" role="alert" />
                <div class="form-floating mb-3">
                    <input type="text" value="@user.UserName" class="form-control" placeholder="Please choose your username." disabled />
                    <label for="username" class="form-label">Username</label>
                </div>
                <div class="form-floating mb-3">
                    <InputText @bind-Value="Input.PhoneNumber" class="form-control" placeholder="Please enter your phone number." />
                    <label for="phone-number" class="form-label">Phone number</label>
                    <ValidationMessage For="() => Input.PhoneNumber" class="text-danger" />
                </div>

                <button type="submit" class="w-100 btn btn-lg btn-primary">Save</button>
                <p>@user.UserProfile!.LastName</p>
                <p>@user.UserProfile!.FirstName</p>


            </EditForm>
        </div>
    </div>
}

@code {
    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [CascadingParameter]
    protected ApplicationUser user { get; set; } = default!;


    private string? username;
    private string? phoneNumber;


    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();


    protected override async Task OnInitializedAsync()
    {


    }


    private async Task OnValidSubmitAsync()
    {


        if (Input.PhoneNumber != phoneNumber)
        {
            var setPhoneResult = await UserManager.SetPhoneNumberAsync(user, Input.PhoneNumber);
            if (!setPhoneResult.Succeeded)
            {
                // RedirectManager.RedirectToCurrentPageWithStatus("Error: Failed to set phone number.", HttpContext);
            }
        }

        await SignInManager.RefreshSignInAsync(user);
    }

    private sealed class InputModel
    {
        [Phone]
        [Display(Name = "Phone number")]
        public string? PhoneNumber { get; set; }
    }
}
