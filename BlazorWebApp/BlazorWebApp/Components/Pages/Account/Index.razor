@page "/account/details"

@using System.ComponentModel.DataAnnotations
@using BlazorWebApp.Models
@using Microsoft.AspNetCore.Identity
@using BlazorWebApp.Data
@using Microsoft.EntityFrameworkCore

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject ApplicationDbContext DbContext
@inject UserService UserService

<PageTitle>Profile</PageTitle>


@if (user == null)
{
    <div>Loading...</div>
}
else
{<section id="account-details"> 
    <div class="details">
        <div class="basic-info">
                <EditForm Model="Input" FormName="BasicInfo" OnValidSubmit="OnValidSubmitAsync" method="post">
                    <div class="content">
                        <div id="form-email" class="input-group">
                            <label for="Email">Email</label>
                            <Input type="text" id="Email" Value="@user.Email" disabled />
                            <div class="validation-message">
                            </div>
                        </div>

                        <div id="form-firstname" class="input-group">
                            <label for="FirstName">First Name</label>
                            <InputText id="FirstName" @bind-Value="Input.FirstName" placeholder="@user.UserProfile!.FirstName" />
                            <div class="validation-message">
                                <ValidationMessage For="@(() => Input.FirstName)" />
                            </div>
                        </div>

                        <div id="form-lastname" class="input-group">
                            <label for="Lastname">Last Name</label>
                            <InputText id="Lastname" @bind-Value="Input.LastName" placeholder="@user.UserProfile!.LastName" />
                            <div class="validation-message">
                                <ValidationMessage For="@(() => Input.LastName)" />
                            </div>
                        </div>

                        <div id="form-bio" class="input-group">
                            <label for="Biography">Biography</label>
                            <InputText id="Biography" @bind-Value="Input.Biography" placeholder="write something about yourself" />
                            <div class="validation-message">
                                <ValidationMessage For="@(() => Input.Biography)" />
                            </div>
                        </div>

                        <hr />

                        <div id="form-addressline-1" class="input-group">
                            <label for="Addressline-1">Addressline 1</label>
                            <InputText id="Lastname" @bind-Value="Input.AddressLine_1" placeholder="Addressline 1" />
                            <div class="validation-message">
                                <ValidationMessage For="@(() => Input.AddressLine_1)" />
                            </div>
                        </div>

                        <div id="form-addressline-2" class="input-group">
                            <label for="Addressline-2">Addressline 2</label>
                            <InputText id="Addressline-2" @bind-Value="Input.AddressLine_2" placeholder="Addressline 2" />
                            <div class="validation-message">
                                <ValidationMessage For="@(() => Input.AddressLine_2)" />
                            </div>
                        </div>

                        <div id="form-postalcode" class="input-group">
                            <label for="Postalcode">Postal code</label>
                            <InputText id="Lastname" @bind-Value="Input.PostalCode" placeholder="Enter your postal code" />
                            <div class="validation-message">
                                <ValidationMessage For="@(() => Input.PostalCode)" />
                            </div>
                        </div>

                        <div id="form-city" class="input-group">
                            <label for="Lastname">Last Name</label>
                            <InputText id="Lastname" @bind-Value="Input.City" placeholder="Enter your city" />
                            <div class="validation-message">
                                <ValidationMessage For="@(() => Input.City)" />
                            </div>
                        </div>



                        <div class="form-buttons">
                            <button class="btn-gray" type="reset">Cancel</button>
                            <button class="btn-theme" type="submit">Save changes</button>
                        </div>

                    </div>
                </EditForm>
        </div>
    </div>
</section>
}

@code {
    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [CascadingParameter]
    protected ApplicationUser user { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();




    protected override async Task OnInitializedAsync()
    {
        // Input.FirstName = user.UserProfile!.FirstName;
        // Input.LastName = user.UserProfile!.LastName;
        // Input.Biography = user.UserProfile!.Biography;
        // Input.AddressLine_1 = user.UserAddress!.AddressLine_1;
        // Input.AddressLine_2 = user.UserAddress!.AddressLine_2;
        // Input.PostalCode = user.UserAddress!.PostalCode;
        // Input.City = user.UserAddress!.City;

    }


    private async Task OnValidSubmitAsync()
    {


        await SignInManager.RefreshSignInAsync(user);
    }

    private sealed class InputModel
    {
        public string? FirstName { get; set; }
        public string? LastName { get; set; }
        public string? Biography { get; set; }
        public string? AddressLine_1 { get; set; }
        public string? AddressLine_2 { get; set; }
        public string? PostalCode { get; set; }
        public string? City { get; set; }
    }

}
