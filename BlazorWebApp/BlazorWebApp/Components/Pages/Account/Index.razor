@page "/account/details"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using BlazorWebApp.Data
@using Microsoft.EntityFrameworkCore
@attribute [StreamRendering]

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject ApplicationDbContext DbContext
@inject NavigationManager NavigationManager

<PageTitle>Profile</PageTitle>

<h3>Profile</h3>

@if(userProfile == null || userAddress == null || user == null)
{
    <p>Loading...</p>
}
else
{
    <section id="account-details"> 
        <div class="details">
            <div class="basic-info">
                    <EditForm Model="Input" FormName="BasicInfo" OnValidSubmit="OnValidSubmitAsync" method="post">
                        <div class="content">
                        <div id="form-email" class="input-group">
                            <label for="Email">Email address</label>
                            <InputText type="text" id="Email" @bind-Value="@user.Email" disabled />
                            <div class="validation-message">
                            </div>
                        </div>

                            <div id="form-phone" class="input-group">
                                <label for="PhoneNumber">Phone number</label>
                                    <InputText type="text" id="Email" @bind-Value="Input.PhoneNumber" />
                                <div class="validation-message">
                                </div>
                            </div>

                            <div id="form-firstname" class="input-group">
                                <label for="FirstName">First Name</label>
                                <InputText id="FirstName" @bind-Value="Input.FirstName" placeholder="Your first name" />
                                <div class="validation-message">
                                    <ValidationMessage For="@(() => Input.FirstName)" />
                                </div>
                            </div>

                            <div id="form-lastname" class="input-group">
                                <label for="Lastname">Last Name</label>
                                <InputText id="Lastname" @bind-Value="Input.LastName" placeholder="Your last name" />
                                <div class="validation-message">
                                    <ValidationMessage For="@(() => Input.LastName)" />
                                </div>
                            </div>

                            <div id="form-bio" class="input-group">
                                <label for="Biography">Biography</label>
                                <InputText id="Biography" @bind-Value="Input.Biography" placeholder="write something about yourself" />
                                <div class="validation-message">
                                    <ValidationMessage For="@(() => Input.Biography)" />
                                </div>
                            </div>

                            <hr />

                            <div id="form-addressline-1" class="input-group">
                                <label for="Addressline-1">Addressline 1</label>
                                <InputText id="Lastname" @bind-Value="Input.AddressLine_1" placeholder="Addressline 1" />
                                <div class="validation-message">
                                    <ValidationMessage For="@(() => Input.AddressLine_1)" />
                                </div>
                            </div>

                            <div id="form-addressline-2" class="input-group">
                                <label for="Addressline-2">Addressline 2</label>
                                <InputText id="Addressline-2" @bind-Value="Input.AddressLine_2" placeholder="Addressline 2" />
                                <div class="validation-message">
                                    <ValidationMessage For="@(() => Input.AddressLine_2)" />
                                </div>
                            </div>

                            <div id="form-postalcode" class="input-group">
                                <label for="Postalcode">Postal code</label>
                                <InputText id="Lastname" @bind-Value="Input.PostalCode" placeholder="Enter your postal code" />
                                <div class="validation-message">
                                    <ValidationMessage For="@(() => Input.PostalCode)" />
                                </div>
                            </div>

                            <div id="form-city" class="input-group">
                                <label for="Lastname">Last Name</label>
                                <InputText id="Lastname" @bind-Value="Input.City" placeholder="Enter your city" />
                                <div class="validation-message">
                                    <ValidationMessage For="@(() => Input.City)" />
                                </div>
                            </div>



                            <div class="form-buttons">
                                <button class="btn-gray" type="reset">Cancel</button>
                                <button class="btn-theme" type="submit">Save changes</button>
                            </div>

                        </div>
                    </EditForm>
            </div>
        </div>
    </section>
}


@code {
    private ApplicationUser user = default!;
    private UserProfile? userProfile = default!;
    private UserAddress? userAddress = default!;
    private string? phoneNumber;
    private string? firstName;
    private string? lastName;
    private string? biography;
    private string? addressLine_1;
    private string? addressLine_2;
    private string? postalCode;
    private string? city;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        

        user = await UserManager.GetUserAsync(HttpContext.User) ?? null!; 
        userProfile = await DbContext.UserProfiles.FirstOrDefaultAsync(x => x.Id == user.UserProfileId);
        userAddress = await DbContext.UserAddresses.FirstOrDefaultAsync(x => x.Id == user.UserAddressId);


        phoneNumber = await UserManager.GetPhoneNumberAsync(user);
        firstName = userProfile!.FirstName;
        lastName = userProfile!.LastName;
        biography = userProfile!.Biography;
        addressLine_1 = userAddress!.AddressLine_1;
        addressLine_2 = userAddress!.AddressLine_2;
        postalCode = userAddress!.PostalCode;
        city = userAddress!.City;

        Input.PhoneNumber ??= phoneNumber;
        Input.FirstName ??= firstName;
        Input.LastName ??= lastName;
        Input.Biography ??= biography;
        Input.AddressLine_1 ??= addressLine_1;
        Input.AddressLine_2 ??= addressLine_2;
        Input.PostalCode ??= postalCode;
        Input.City ??= city;
    }

    private async Task OnValidSubmitAsync()
    {
        if (Input.PhoneNumber != phoneNumber || Input.FirstName != firstName || Input.LastName != lastName || Input.Biography != biography || Input.AddressLine_1 != addressLine_1 || Input.AddressLine_2 != addressLine_2 || Input.PostalCode != postalCode || Input.City != city)
        {
            var setPhoneResult = await UserManager.SetPhoneNumberAsync(user, Input.PhoneNumber);

            if (!setPhoneResult.Succeeded)
            {
                // RedirectManager.RedirectToCurrentPageWithStatus("Error: Failed to set phone number.", HttpContext);
            }
            if (Input.FirstName != null)
            {
                userProfile!.FirstName = Input.FirstName;
            }
            if (Input.LastName != null)
            {
                userProfile!.LastName = Input.LastName;
            }
            userProfile!.Biography = Input.Biography;

            if (Input.AddressLine_1 != null)
            {
                userAddress!.AddressLine_1 = Input.AddressLine_1;
            }
            userAddress!.AddressLine_2 = Input.AddressLine_2;
            if (Input.PostalCode != null)
            {
                userAddress!.PostalCode = Input.PostalCode;
            }
            if (Input.City != null)
            {
                userAddress!.City = Input.City;
            }

            await DbContext.SaveChangesAsync();

            
        }

        NavigationManager.NavigateTo("/account/details");
    }

    private sealed class InputModel
    {
        [Phone]
        [Display(Name = "Phone number")]
        [Required(ErrorMessage = "Phone number is required.")]
        public string? PhoneNumber { get; set; }

        [Required(ErrorMessage = "First name is required.")]
        public string? FirstName { get; set; }

        [Required(ErrorMessage = "Last name is required.")]
        public string? LastName { get; set; }

        public string? Biography { get; set; }

        [Required(ErrorMessage = "Addressline 1 is required.")]
        public string? AddressLine_1 { get; set; }

        public string? AddressLine_2 { get; set; }

        [Required(ErrorMessage = "Postal code is required.")]
        public string? PostalCode { get; set; }

        [Required(ErrorMessage = "City is required.")]
        public string? City { get; set; }
    }
}
