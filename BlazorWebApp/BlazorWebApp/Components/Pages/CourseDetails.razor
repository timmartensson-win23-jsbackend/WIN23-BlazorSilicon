@page "/coursedetails/{courseId}"
@using BlazorWebApp.Data
@using Microsoft.AspNetCore.Identity
@attribute [StreamRendering]
@rendermode InteractiveServer


@inject UserManager<ApplicationUser> UserManager
@inject ApplicationDbContext DbContext
@inject SignInManager<ApplicationUser> SignInManager
@inject ServiceBusManager ServiceBusManager

<PageTitle>About course</PageTitle>




@if (course == null)
{
    <p>Loading...</p>
}
else
{
    <section id="course-showcase">
        <img class="header-image" src="/images/@course.ShowcaseImage" alt="alttext image" />
        <div class="container">
            <div class="path">
                <span><i class="fa-sharp fa-thin fa-house"></i> Home <i class="fa-thin fa-chevrons-right"></i> Courses <i class="fa-thin fa-chevrons-right"></i> @course.Title </span>
            </div>

            <div class="header-container">
                <div class="tags">
                    @if (course.IsBestSeller)
                    {
                        <div class="tag-1">
                            <span class="text-s">Best seller</span>
                        </div>
                    }
                    <div class="tag-2">
                        <span class="text-s">Digital</span>
                    </div>
                </div>
                <div class="course-title">
                    <h1>@course.Title</h1>
                    <span class="text-lg">@course.CourseDescription</span>
                </div>
                <div class="author-rating-box">
                    <div class="interactions">
                        <div class="rating">
                            <i class="fa-sharp fa-solid fa-star"></i>
                            <i class="fa-sharp fa-solid fa-star"></i>
                            <i class="fa-sharp fa-solid fa-star"></i>
                            <i class="fa-sharp fa-solid fa-star"></i>
                            <i class="fa-sharp fa-regular fa-star"></i>
                        </div>
                        <span class="text-m">(@course.Reviews reviews)</span>
                        <span class="text-m"><i class="fa-light fa-thumbs-up"></i> @course.LikesInNumbers likes</span>
                        <span class="text-m"><i class="fa-regular fa-clock"></i> @course.ViewHours hours</span>
                    </div>
                    <div class="author">
                        <img src="/images/@course.AuthorImage" alt="@course.AutherImageAltText" />
                        <div class="created-by">
                            <span class="text-m">Created By</span>
                            <span class="text-m">@course.AuthorName</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </section>
    <section id="course-description">
        <div class="course-content container">
            <div class="description-section">
                <div class="learn-points">
                    <div class="description">
                        <p>Course Description</p>
                        <p>@course.CourseDescription</p>
                    </div>
                    <div class="learn">
                        <p>What you'll learn</p>
                        <ul class="list" style="list-style-type: none;">
                            @if (course.LearnPoints is not null)
                            {
                                @foreach (var point in course.LearnPoints)
                                {
                                    <li><i class="fa-sharp fa-regular fa-circle-check"></i> @point</li>
                                }
                            }
                        </ul>
                    </div>
                </div>
                <div class="course-info">
                    <div class="course-box">
                        <p class="title">This course includes:</p>
                        <p><i class="fa-sharp fa-light fa-display"></i> @course.ViewHours on-demand video</p>
                        <p><i class="fa-thin fa-file"></i> @course.Articles articles</p>
                        <p><i class="fa-sharp fa-thin fa-download"></i> @course.Resources downloadable resources</p>
                        <p><i class="fa-regular fa-infinity"></i> @course.AccessTime access</p>
                        <p><i class="fa-sharp fa-thin fa-trophy"></i> Certificate of completion</p>

                        <div class="course-price">
                            @if (course.DiscountPrice is null)
                            {
                                <p style="text-decoration:none" class="ord-price">$@course.Price</p>
                            }
                            else
                            {
                                <p class="discount-price">$@course.DiscountPrice</p>
                                <p class="ord-price">$@course.Price</p>
                            }
                        </div>
                        <a class="@(isSaved ? "btn-youtube" : "btn-theme")" @onclick="ToggleCourse">@(@isSaved ? "Leave Course" : "Join Course")</a>
                        @if (statusMessage is not null)
                        {
                            <p>@statusMessage</p>
                        }
                    </div>
                </div>
            </div>
            <div class="details-section">
                <p class="details-title">Program Details</p>
                <ol class="detail-list">
                    @if (course.ProgramDetailsTitle is not null && course.ProgramDetailsText is not null)
                    {
                        @foreach (var (detail, detailText) in course.ProgramDetailsTitle.Zip(course.ProgramDetailsText))
                        {
                            <li class="item">
                                <p class="title">@detail</p>
                                <p class="subtitle">@detailText</p>
                            </li>
                        }
                    }
                </ol>
            </div>
        </div>
    </section>
    <section id="course-author">
        <div class="author-content container">
            <img class="squiggly" src="/images/background-squiggly-pattern.svg" alt="background-design" />
            <div class="author-image">
                <img src="/images/@course.AuthorImage" alt="" />
            </div>
            <div class="author-box">
                <div class="author-info">
                    <span class="learn-from"> Learn from the best</span>
                    <span class="author-name">@course.AuthorName</span>
                    <span class="author-description">@course.AutherBio</span>

                    <div class="social">
                        <div class="youtube-btn">
                            <a class="btn-theme"><i class="fa-brands fa-youtube"></i> @course.YouTubeSubscribers subscribers</a>
                        </div>
                        <div class="fb-btn">
                            <a class="btn-theme"><i class="fa-brands fa-square-facebook"></i> @course.FaceBookFollowers followers</a>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </section>
}





@code {
    private CoursesModel? course;

    private bool isSaved;

    private ApplicationUser? user;

    private string? statusMessage;

    [Parameter]
    public string? courseId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        user = await UserManager.GetUserAsync(SignInManager.Context.User);


        var query = new GraphQLQuery
            {
                Query = $"{{ getCourseById(id: \"{courseId}\") {{ id showcaseImage courseImageAltText isBestSeller title courseDescription learnPoints articles resources accessTime discountPrice price programDetailsTitle programDetailsText reviews likesInNumbers viewHours authorImage autherImageAltText authorName autherBio youTubeSubscribers faceBookFollowers}} }}"
            };
        var respons = await Http.PostAsJsonAsync("https://coursesprovider.azurewebsites.net/api/graphql?code=Ms8IxsC9w8G_dT8KJZbuf11TR3o7reeP9ld8DSPtnesZAzFuaTdsNw%3D%3D", query);

        if (respons.IsSuccessStatusCode)
        {
            var result = await respons.Content.ReadFromJsonAsync<DynamicGraphQLResponse>();
            var courseData = result?.Data.GetProperty("getCourseById");
            if (courseData.HasValue)
            {
                var courseJson = courseData.Value;

                var learnPointsJson = courseJson.GetProperty("learnPoints");
                var learnPoints = new List<string>();
                foreach (var learnPoint in learnPointsJson.EnumerateArray())
                {
                    learnPoints.Add(learnPoint.GetString()!);
                }

                var programDetailsTitleJson = courseJson.GetProperty("programDetailsTitle");
                var programDetailsTitles = new List<string>();
                foreach (var programDetailsTitle in programDetailsTitleJson.EnumerateArray())
                {
                    programDetailsTitles.Add(programDetailsTitle.GetString()!);
                }

                var programDetailsTextJson = courseJson.GetProperty("programDetailsText");
                var programDetailsTexts = new List<string>();
                foreach (var programDetailsText in programDetailsTextJson.EnumerateArray())
                {
                    programDetailsTexts.Add(programDetailsText.GetString()!);
                }

                course = new CoursesModel
                {
                    Id = courseJson.GetProperty("id").GetString(),
                    Title = courseJson.GetProperty("title").GetString()!,
                    IsBestSeller = courseJson.GetProperty("isBestSeller").GetBoolean(),
                    ShowcaseImage = courseJson.GetProperty("showcaseImage").GetString(),
                    CourseImageAltText = courseJson.GetProperty("courseImageAltText").GetString(),
                    AuthorImage = courseJson.GetProperty("authorImage").GetString(),
                    AuthorName = courseJson.GetProperty("authorName").GetString(),
                    CourseDescription = courseJson.GetProperty("courseDescription").GetString(),
                    Reviews = courseJson.GetProperty("reviews").GetString(),
                    ViewHours = courseJson.GetProperty("viewHours").GetString(),
                    AutherImageAltText = courseJson.GetProperty("autherImageAltText").GetString(),
                    LikesInNumbers = courseJson.GetProperty("likesInNumbers").GetString(),
                    Articles = courseJson.GetProperty("articles").GetString(),
                    Resources = courseJson.GetProperty("resources").GetString(),
                    AccessTime = courseJson.GetProperty("accessTime").GetString(),
                    DiscountPrice = courseJson.GetProperty("discountPrice").GetString(),
                    Price = courseJson.GetProperty("price").GetString(),
                    AutherBio = courseJson.GetProperty("autherBio").GetString(),
                    YouTubeSubscribers = courseJson.GetProperty("youTubeSubscribers").GetString(),
                    FaceBookFollowers = courseJson.GetProperty("faceBookFollowers").GetString(),
                    ProgramDetailsTitle = programDetailsTitles,
                    ProgramDetailsText = programDetailsTexts,
                    LearnPoints = learnPoints
                };
            }

        }

        isSaved = DbContext.SavedCourses.Any(sc => sc.UserId == user!.Id && sc.CourseId == course!.Id);
    }

    private async Task ToggleCourse()
    {
        if (course != null && user != null)
        {
            if (isSaved)
            {
                var savedCourse = DbContext.SavedCourses.First(sc => sc.UserId == user.Id && sc.CourseId == course.Id);
                if (savedCourse != null)
                {
                    DbContext.SavedCourses.Remove(savedCourse);
                    await DbContext.SaveChangesAsync();
                    statusMessage = "Course removed!";
                    isSaved = false;
                }
            }
            else
            {
                var savedCourse = new SavedCourses
                {
                    UserId = user.Id,
                    CourseId = course.Id!
                };
                DbContext.SavedCourses.Add(savedCourse);
                await DbContext.SaveChangesAsync();
                statusMessage = "Course joined!";
                isSaved = true;

                await ServiceBusManager.JoinCourseAsync(user.Email!, course.Title, "coursemessage_request");
            }
            StateHasChanged();
        }
    }



}





